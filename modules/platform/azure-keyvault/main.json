{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "13658948198651155344"
    }
  },
  "parameters": {
    "resourceName": {
      "type": "string",
      "metadata": {
        "description": "Used to name all resources"
      },
      "maxLength": 20,
      "minLength": 3
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Resource Location."
      }
    },
    "enableDeleteLock": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable lock to prevent accidental deletion"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Key Vault SKU."
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Specify Identity to provide Network Contributor Role Access (Optional)."
      }
    },
    "permissions": {
      "type": "object",
      "defaultValue": {
        "secrets": [
          "get",
          "list"
        ]
      },
      "metadata": {
        "description": "Key Vault Defined Access Policies."
      }
    },
    "softDeleteRetentionInDays": {
      "type": "int",
      "defaultValue": 7,
      "maxValue": 14,
      "minValue": 7,
      "metadata": {
        "description": "Key Vault Retention Days."
      }
    },
    "rbacPermissions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of objects that describe RBAC permissions, format { roleDefinitionResourceId (string), principalId (string), principalType (enum), enabled (bool) }. Ref: https://docs.microsoft.com/en-us/azure/templates/microsoft.authorization/roleassignments?tabs=bicep"
      }
    },
    "privateLinkSettings": {
      "type": "object",
      "defaultValue": {
        "subnetId": "1",
        "vnetId": "1"
      },
      "metadata": {
        "description": "Settings Required to Enable Private Link"
      }
    },
    "privateEndpointName": {
      "type": "string",
      "defaultValue": "kvPrivateEndpoint",
      "metadata": {
        "description": "Specifies the name of the private link to the Azure Container Registry."
      }
    }
  },
  "variables": {
    "name": "[format('kv-{0}{1}', replace(parameters('resourceName'), '-', ''), uniqueString(resourceGroup().id, parameters('resourceName')))]",
    "enablePrivateLink": "[and(not(equals(parameters('privateLinkSettings').vnetId, '1')), not(equals(parameters('privateLinkSettings').subnetId, '1')))]",
    "privateDNSZoneName": "privatelink.vaultcore.azure.net"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "[parameters('sku')]"
        },
        "accessPolicies": "[if(equals(parameters('principalId'), 'null'), createArray(), createArray(createObject('objectId', parameters('principalId'), 'tenantId', subscription().tenantId, 'permissions', parameters('permissions'))))]",
        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableRbacAuthorization": false,
        "networkAcls": "[if(variables('enablePrivateLink'), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'), createObject())]",
        "publicNetworkAccess": "[if(variables('enablePrivateLink'), 'Disabled', 'Enabled')]"
      }
    },
    {
      "condition": "[parameters('enableDeleteLock')]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]",
      "name": "[format('{0}-lock', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]",
      "properties": {
        "level": "CanNotDelete"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]"
      ]
    },
    {
      "condition": "[parameters('rbacPermissions')[copyIndex()].enabled]",
      "copy": {
        "name": "roleAssignment",
        "count": "[length(parameters('rbacPermissions'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name'))), parameters('rbacPermissions')[copyIndex()].principalId, parameters('rbacPermissions')[copyIndex()].roleDefinitionResourceId)]",
      "properties": {
        "roleDefinitionId": "[parameters('rbacPermissions')[copyIndex()].roleDefinitionResourceId]",
        "principalId": "[parameters('rbacPermissions')[copyIndex()].principalId]",
        "principalType": "[parameters('rbacPermissions')[copyIndex()].principalType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]"
      ]
    },
    {
      "condition": "[variables('enablePrivateLink')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-02-01",
      "name": "[parameters('privateEndpointName')]",
      "location": "[parameters('location')]",
      "properties": {
        "subnet": {
          "id": "[parameters('privateLinkSettings').subnetId]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[parameters('privateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ],
        "customDnsConfigs": [
          {
            "fqdn": "[variables('privateDNSZoneName')]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]"
      ]
    },
    {
      "condition": "[variables('enablePrivateLink')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}-link', variables('privateDNSZoneName'), variables('privateDNSZoneName'))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[parameters('privateLinkSettings').vnetId]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
      ]
    },
    {
      "condition": "[variables('enablePrivateLink')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDNSZoneName')]",
      "location": "global"
    },
    {
      "condition": "[variables('enablePrivateLink')]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-01-01",
      "name": "[format('{0}/dnsgroupname', parameters('privateEndpointName'))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name'))]",
      "metadata": {
        "description": "The name of the azure keyvault."
      }
    },
    "id": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', if(greater(length(variables('name')), 24), substring(variables('name'), 0, 24), variables('name')))]",
      "metadata": {
        "description": "The resourceId of the azure keyvault."
      }
    }
  }
}